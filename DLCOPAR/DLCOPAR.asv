function [D, X, rt] = DLCOPAR(Y, Y_range, opts)
    % syntax = [D, X] = DLCOPAR(Y, Y_range, opts)

 % cost(X,D) = normF2(Y - D*X) + sum_c((normF2(Yc - DcXcc - D0X0c) + sum_{i\neq c} normF2(Xic)) + lambda*norm1(X) + ...
     %    eta*sum_c sum_{i = c+1 -> C+1} normF2(Di'*Dc);
    if nargin == 0
        addpath(fullfile('..', 'utils'));
        addpath(fullfile('..', 'ODL'));
        addpath(fullfile('..', 'DLSI'));
        C = 10;    N = 7;    d = 30;
        % C = 3;    N = 30;    d = 78;
        k = 7;
        k0 = 10;
        opts.k = k;
        opts.k0 = k0;
        opts.lambda = 0.0001;
        opts.eta = 0.01;
        opts.gamma = 0.01;
        
        opts.max_iter = 3;
        opts.show = false;
        Y = normc(rand(d, C*N));
        Y_range = N*(0:C);        
        opts.max_iter = 5;
        opts.verbal = true;
        opts = initOpts(opts);
    end
    %%
    C = numel(Y_range) - 1;
    D_range = opts.k*(0:C);
    % --------------- append D0 -------------------------
    D_range_ext = [D_range D_range(end)+opts.k0];    
    opts.D_range_ext = D_range_ext;    
    %% ================== block: init ==========================    
    optsinit = opts;
    optsinit.max_iter = 30;
    optsinit.verbal = false;
    [D, X] = DLCOPAR_init(Y, Y_range, D_range_ext, optsinit);
    %%
    iter = 0;
    optsX = opts;
    optsX.verbal = 0;
    optsD = opts;
    optsD.verbal = 0;
    tic
    while iter < opts.max_iter 
        iter = iter + 1;
        
        %% ========= update X ==============================
        if opts.verbal
            fprintf('iter = %3d | updating X...', iter);
        end 
        X = DLCOPAR_updateX(Y, Y_range, D, X, optsX);
        t = toc;     
        if t > 20*3600
            break;
        end 
        if opts.verbal           
            costX = DLCOPAR_cost(Y, Y_range, D, X, opts);
            fprintf('| costX = %5.3f\n', costX);        
        end 
        %% ========= update D ==============================
        if opts.verbal
            fprintf('             updating D...');
        end 
        D = DLCOPAR_updateD(Y, Y_range, D, X, optsD); % and DCp1 
        t0 = toc; 
        if opts.verbal
            costD = DLCOPAR_cost(Y, Y_range, D, X, opts);        
            fprintf('| costD = %5.3f ', costD);    
            t = t0*(opts.max_iter - iter)/iter;
            time_estimate(t);
            if abs(costX - costD) < 1e-3
                break;
            end
        end 
              
        if t0 > 20*3600
            break;
        end
    end 
    rt = toc;
    %%
    if nargin == 0
        D = [];
        X = [];
        rt = [];
    end
end 




function [D, X] = DLCOPAR_init(Y, Y_range, D_range, opts)
    k0 = D_range_ext(end) - D_range_ext(end - 1);
    d = size(Y,1);
    C = numel(Y_range) - 1;
    D = zeros(d, D_range_ext(end));
    D_range = D_range_ext(1:end-1);
    X = zeros(D_range_ext(end), Y_range(end));    
    if opts.verbal 
        fprintf('Initializing...\n');
        fprintf('class: \n');
    end 
    for c = 1: C 
        if opts.verbal
            fprintf('%3d ', c);
            if mod(c, 10) == 0
                fprintf('\n');
            end 
        end 
        Yc = get_block_col(Y, c, Y_range);
        [Dc, Xcc] = ODL(Yc, D_range(c+1) - D_range(c), opts.lambda, opts);
        D(:, D_range(c)+1: D_range(c+1)) = Dc;
        X(D_range(c)+1: D_range(c+1), Y_range(c)+1: Y_range(c+1)) = Xcc;
    end 
    [DCp1, XCp1] = ODL(Y, k0, opts.lambda, opts);
    D(:, D_range_ext(C+1)+1: end) = DCp1;
    X(D_range_ext(C+1)+1:end, :) = XCp1;
end 